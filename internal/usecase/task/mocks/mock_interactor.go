// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/task/interactor.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/task/interactor.go -destination=internal/usecase/task/mocks/mock_interactor.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	task "github.com/ko44d/go-clean-hexapp/internal/domain/task"
	gomock "go.uber.org/mock/gomock"
)

// MockInteractor is a mock of Interactor interface.
type MockInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockInteractorMockRecorder
	isgomock struct{}
}

// MockInteractorMockRecorder is the mock recorder for MockInteractor.
type MockInteractorMockRecorder struct {
	mock *MockInteractor
}

// NewMockInteractor creates a new mock instance.
func NewMockInteractor(ctrl *gomock.Controller) *MockInteractor {
	mock := &MockInteractor{ctrl: ctrl}
	mock.recorder = &MockInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractor) EXPECT() *MockInteractorMockRecorder {
	return m.recorder
}

// AddTask mocks base method.
func (m *MockInteractor) AddTask(ctx context.Context, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask.
func (mr *MockInteractorMockRecorder) AddTask(ctx, title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockInteractor)(nil).AddTask), ctx, title)
}

// CompleteTask mocks base method.
func (m *MockInteractor) CompleteTask(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTask", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTask indicates an expected call of CompleteTask.
func (mr *MockInteractorMockRecorder) CompleteTask(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTask", reflect.TypeOf((*MockInteractor)(nil).CompleteTask), ctx, id)
}

// GetTasks mocks base method.
func (m *MockInteractor) GetTasks(ctx context.Context) ([]*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", ctx)
	ret0, _ := ret[0].([]*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockInteractorMockRecorder) GetTasks(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockInteractor)(nil).GetTasks), ctx)
}
